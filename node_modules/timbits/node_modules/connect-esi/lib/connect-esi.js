(function() {
  var http, out, querystring, url;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  http = require('http');
  url = require('url');
  querystring = require('querystring');
  out = (require('styout')).instance('connect-esi');
  out.verbosity = out.WARN_VERBOSITY;
  exports.setupESI = function() {
    var handleESI;
    return handleESI = function(req, res, next) {
      var end, endCalled, endWait, write;
      endCalled = false;
      endWait = false;
      /*
      		writeHead = res.writeHead
      		res.writeHead = (statusCode, reasonPhrase, headers) ->
      			out.debug "res.writeHead | statusCode: " + statusCode + " | req.url: " + req.url
      			out.debug res._headers
      			res.writeHead = writeHead
      			res.writeHead statusCode, reasonPhrase, headers
      			return
      		*/
      write = res.write;
      res.write = function(chunk, encoding) {
        var content_type, esiProcessor, ignoreESI, re;
        res.write = write;
        ignoreESI = /esi=false/.test(req.url);
        content_type = (res._headers != null) && (res._headers['content-type'] != null) ? res._headers['content-type'] : 'text/plain';
        out.debug("res.write | content-type: " + content_type + " | req.url: " + req.url);
        re = /text|xml|octet-stream/i;
        if (re.test(content_type) && ignoreESI === false) {
          endWait = true;
          esiProcessor = new exports.processESI(chunk, function(err, chunk) {
            var _ref;
            out.debug("processESI callback | req.url: " + req.url);
            /*
            					lengthInUtf8Bytes = (str) ->
            						m = encodeURIComponent(str).match(/%[89ABab]/g)
            						str.length + (if m then m.length else 0)
            					*/
            res.setHeader('content-type', content_type);
            res.setHeader('transfer-encoding', 'chunked');
            res.writeHead((_ref = res.statusCode) != null ? _ref : 200);
            endWait = false;
            res.write(chunk, encoding);
            if (endCalled) {
              return res.end();
            }
          });
          esiProcessor.request = req.headers;
          esiProcessor.request.url = url.parse('http://' + req.headers['host'] + req.url, true);
          esiProcessor.execute();
        } else {
          res.write(chunk, encoding);
          if (endCalled) {
            res.end();
          }
        }
      };
      end = res.end;
      res.end = function(data, encoding) {
        endCalled = true;
        out.debug("res.end | data: " + (data != null) + " | wait: " + endWait + " | req.url: " + req.url);
        if (data != null) {
          res.write(data, encoding);
        } else if (endWait === false) {
          res.end = end;
          res.end();
        }
      };
      return next();
    };
  };
  exports.processESI = function(data, callback) {
    this.original = data;
    this.data = data.toString();
    this.callback = callback;
    this.request = {
      'url': url.parse('http://localhost:5678')
    };
    this.esi_tags = [];
    this.processed = false;
    this.execute = function() {
      var esi_tag, _i, _len, _ref, _results;
      out.info("Searching for ESIs...");
      this.esi_tags = this.searchESI(this.data);
      out.info("Found " + this.esi_tags.length + " ESIs");
      if (this.esi_tags.length !== 0) {
        _ref = this.esi_tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          esi_tag = _ref[_i];
          out.info("Fetch ESI: " + esi_tag);
          _results.push(this.fetchESI(esi_tag, __bind(function(src, status, body) {
            var remaining;
            if (status >= 400) {
              body = '';
              out.warn("ESI: " + src + " returned status " + status);
            } else {
              out.debug("ESI: " + src + " returned status " + status);
            }
            out.info("ESI tag subsitution: " + src);
            remaining = this.subESI(src, body);
            out.info(remaining + " remaining ESIs");
            if (remaining === 0 && this.processed === false) {
              this.processed = true;
              return this.callback(false, this.data);
            }
          }, this)));
        }
        return _results;
      } else {
        return this.callback(false, this.original);
      }
    };
    this.searchESI = function(data) {
      var esi_tags, k, match, processed_esi_tag, re, removeDuplicates, _ref;
      re = new RegExp('<esi[^>]* src=("[^>"]+"|\'[^>\']+\')[^>]*>(</esi[^>]*>)?', 'gi');
      esi_tags = data.match(re);
      for (k in esi_tags) {
        re = new RegExp(' src=("(.*?)"|\'(.*?)\')');
        match = esi_tags[k].match(re);
        esi_tags[k] = (_ref = match[2]) != null ? _ref : match[3];
        processed_esi_tag = this.processESIvars(esi_tags[k]);
        if (esi_tags[k] !== processed_esi_tag) {
          this.subESI(esi_tags[k], "<esi:include src='" + processed_esi_tag + "' />");
          esi_tags[k] = processed_esi_tag;
        }
      }
      removeDuplicates = function(arr) {
        var i, k, narr, obj, v, _len;
        narr = [];
        obj = {};
        for (v = 0, _len = arr.length; v < _len; v++) {
          k = arr[v];
          obj[arr[v]] = 0;
        }
        for (i in obj) {
          narr.push(i);
        }
        return narr;
      };
      esi_tags = removeDuplicates(esi_tags != null ? esi_tags : []);
      return esi_tags;
    };
    this.fetchESI = function(src, callback) {
      var options, uri, _ref, _ref2, _ref3, _ref4, _ref5;
      uri = url.parse(src);
      options = {
        host: (_ref = uri.hostname) != null ? _ref : this.request.url.hostname,
        port: (_ref2 = uri.port) != null ? _ref2 : (uri.protocol != null ? 80 : this.request.url.port),
        path: ((_ref3 = uri.pathname) != null ? _ref3 : '/') + ((_ref4 = uri.search) != null ? _ref4 : '') + ((_ref5 = uri.hash) != null ? _ref5 : '')
      };
      return http.get(options, function(res) {
        var body;
        body = '';
        res.on('data', __bind(function(chunk) {
          return body += chunk.toString();
        }, this));
        return res.on('end', __bind(function() {
          return callback(src, res.statusCode, body);
        }, this));
      }).on('error', function(e) {
        return callback(src, 500, e.message);
      });
    };
    this.subESI = function(src, body) {
      var idx, re;
      re = new RegExp('<esi[^>]* src=("' + RegExp.escape(src) + '"|\'' + RegExp.escape(src) + '\')[^>]*>(</esi[^>]*>)?', 'gi');
      this.data = this.data.replace(re, body.replace(/\$/g, '$$$'));
      idx = this.esi_tags.indexOf(src);
      if (idx !== -1) {
        this.esi_tags.splice(idx, 1);
      }
      return this.esi_tags.length;
    };
    this.processESIvars = function(data) {
      var esi_var, esi_var_result, esi_vars, i, re;
      re = new RegExp('\\$\\([^\\)]+\\)', 'gi');
      esi_vars = data.match(re);
      for (i in esi_vars) {
        re = new RegExp('\\(([^{\\|\\)]*)({([^}]*)})?(\\|([^\\|{)]*))?\\)', 'i');
        esi_var = esi_vars[i].match(re);
        esi_var_result = this.lookupESIvar(esi_var[1], esi_var[3]);
        if (!esi_var_result && (esi_var[5] != null)) {
          esi_var_result = esi_var[5];
        }
        data = data.replace(esi_vars[i], esi_var_result);
      }
      return data;
    };
    this.lookupESIvar = function(esi_var, options) {
      var cookie, matches, re, result, _ref;
      result = '';
      switch (esi_var.toUpperCase()) {
        case 'HTTP_ACCEPT_LANGUAGE':
          result = this.request['accept-language'];
          break;
        case 'HTTP_COOKIE':
          result = '';
          if (options != null) {
            re = new RegExp('(^| )' + options + '=([^;]*)', 'i');
            cookie = (_ref = this.request['cookie']) != null ? _ref : '';
            matches = cookie.match(re);
            if (matches != null) {
              result = matches[2];
            }
          }
          break;
        case 'HTTP_HEADER':
          result = this.request[options];
          break;
        case 'HTTP_HOST':
          result = this.request['host'];
          break;
        case 'HTTP_REFERER':
          result = this.request['referer'];
          break;
        case 'HTTP_USER_AGENT':
          result = this.request['user-agent'];
          break;
        case 'QUERY_STRING':
          if (options != null) {
            result = this.request.url.query[options];
          } else {
            result = querystring.stringify(this.request.url.query);
          }
      }
      if (result == null) {
        result = '';
      }
      return encodeURIComponent(result);
    };
    RegExp.escape = function(text) {
      return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };
  };
}).call(this);
